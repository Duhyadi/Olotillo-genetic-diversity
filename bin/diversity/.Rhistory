outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression("Comparison of " * F[italic(IS)] * " between scales"),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 7,
height = 7,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression("Comparison of " * F[italic(IS)] * " between scales"),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 7,
height = 6,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression("Comparison of " * F[italic(IS)] * " between scales"),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 7,
height = 7,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression("Comparison of " * F[italic(IS)] * " between scales"),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 7,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression("Comparison of " * F[italic(IS)] * " between scales"),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression(bold("Comparison of " * F[italic(IS)] * " between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(F[italic(IS)]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(bold(F)[bold(italic(IS))]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(bold(F)[bold(italic(IS))]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(bold(F)[bold(italic(IS))]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Personalización de etiquetas significativas (p < 0.05)
significance.label.args = list(color = "red", size = 5),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(bold(F)[bold(italic(IS))]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(bold(F)[bold(italic(IS))]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note:" * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
# Crear y guardar el gráfico
ggsave(
filename = "FIS_Npar_custom.png",
plot = ggbetweenstats(
data = data,
x = scale,
y = F,
outlier.tagging = TRUE,
type = "nonparametric",
p.adjust.method = "holm",
pairwise.display = "all",
var.equal = FALSE,
# Solo personalizar colores de los puntos
ggplot.component = ggplot2::scale_color_manual(
values = c("Local" = "purple", "Regional" = "green", "National" = "dodgerblue")
),
# Etiquetas personalizadas
xlab = "Scale",
ylab = expression(bold(F)[bold(italic(IS))]),  # F con subíndices "IS"
title = expression(bold("Comparison of ") * bold(F)[bold(italic(IS))] * bold(" between scales")),
caption = expression("Note: " * F[italic(IS)] * " represents the inbreeding coefficient.")
),
width = 8,
height = 8,
dpi = 300
)
knitr::opts_knit$set(root.dir = "/home/duhyadi/Documents/paper1/for_Alicia_2024/het_vcf/" )
get(wd)
View(data)
View(data)
knitr::opts_knit$set(root.dir = "/home/duhyadi/Documents/paper1/for_Alicia_2024/het_vcf/" )
library(doBy)
library(ggplot2)
library(dplyr)
het <- read.delim("../het_vcf/mixII.het", header = TRUE, sep = "\t", col.names = c("IND", "O(HOM)","E(HOM)","N_SITES", "F"))
knitr::opts_knit$set(root.dir = "/home/duhyadi/Documents/paper1_mayo2025/for_Alicia_2024/het_vcf/" )
het <- read.delim("../het_vcf/mixII.het", header = TRUE, sep = "\t", col.names = c("IND", "O(HOM)","E(HOM)","N_SITES", "F"))
View(het)
# add state column with pure NA
het$state = NA
# add the state of Campeche
cam_rows <- grep("CAM", het$IND)
het$state[cam_rows] <- "Campeche"
cam_rows
# add the state of Chiapas
chis_rows <- grep("CHIS", het$IND)
het$state[chis_rows] <- "Chiapas"
chis_rows
# no state for GAV which are the evolutionary populations
gav_rows <- grep("GAV", het$IND)
het$state[gav_rows] <- " "
gav_rows
# add the state of Guerrero
gro_rows <- grep("GRO", het$IND)
het$state[gro_rows] <- "Guerrero"
gro_rows
# add the state of Hidalgo
hgo_rows <- grep("HGO", het$IND)
het$state[hgo_rows] <- "Hidalgo"
hgo_rows
# add the state of Nayarit
nay_rows <- grep("NAY", het$IND)
het$state[nay_rows] <- "Nayarit"
nay_rows
# add the state of Oaxaca
oax_rows <- grep("OAX", het$IND)
het$state[oax_rows] <- "Oaxaca"
oax_rows
# add the state of Qintana Roo
roo_rows <- grep("ROO", het$IND)
het$state[roo_rows] <- "Qintana Roo"
roo_rows
# add the state of San Luis Potosí
slp_rows <- grep("SLP", het$IND)
het$state[slp_rows] <- "San Luis Potosi"
slp_rows
# add the state of Veracruz
ver_rows <- grep("VER", het$IND)
het$state[ver_rows] <- "Veracruz"
ver_rows
# no state for a sample whose labels are unknown
xxx_rows <- grep("XXX", het$IND)
het$state[xxx_rows] <- " "
xxx_rows
# add state column with pure NA
het$state = NA
# add the state of Campeche
cam_rows <- grep("CAM", het$IND)
het$state[cam_rows] <- "Campeche"
cam_rows
# add the state of Chiapas
chis_rows <- grep("CHIS", het$IND)
het$state[chis_rows] <- "Chiapas"
chis_rows
# no state for GAV which are the evolutionary populations
gav_rows <- grep("GAV", het$IND)
het$state[gav_rows] <- " "
gav_rows
# add the state of Guerrero
gro_rows <- grep("GRO", het$IND)
het$state[gro_rows] <- "Guerrero"
gro_rows
# add the state of Hidalgo
hgo_rows <- grep("HGO", het$IND)
het$state[hgo_rows] <- "Hidalgo"
hgo_rows
# add the state of Nayarit
nay_rows <- grep("NAY", het$IND)
het$state[nay_rows] <- "Nayarit"
nay_rows
# add the state of Oaxaca
oax_rows <- grep("OAX", het$IND)
het$state[oax_rows] <- "Oaxaca"
oax_rows
# add the state of Qintana Roo
roo_rows <- grep("ROO", het$IND)
het$state[roo_rows] <- "Qintana Roo"
roo_rows
# add the state of San Luis Potosí
slp_rows <- grep("SLP", het$IND)
het$state[slp_rows] <- "San Luis Potosi"
slp_rows
# add the state of Veracruz
ver_rows <- grep("VER", het$IND)
het$state[ver_rows] <- "Veracruz"
ver_rows
# no state for a sample whose labels are unknown
xxx_rows <- grep("XXX", het$IND)
het$state[xxx_rows] <- " "
xxx_rows
View(het)
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate.csv", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate.csv", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate.csv", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate.csv", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate.csv", sep = ",")
# the meta file was obtained from a meta used to perform the PCA, the file was obtained on January 8, 2024
data <- read.csv("pca8ene24_meta_mixplate.csv", sep = ",")
View(data)
colnames(het)[colnames(het) == "IND"] <- "sample_name"
# join by sample_name
data_merged <- merge(het, data, by = 'sample_name')
# keep only the variables sample_name, accession_ID, scale and Race along with the diversity values
data_merged2 <- merge(het, data[, c('sample_name', "accession_ID", 'scale', 'Race')], by = 'sample_name', all.x = TRUE)
View(data_merged2)
data_merged2 <- mutate(data_merged2, scale = ifelse(scale == "_L", "Local", scale))
data_merged2 <- mutate(data_merged2, scale = ifelse(scale == "_R", "Regional", scale))
data_merged2 <- mutate(data_merged2, scale = ifelse(scale == "_N", "National", scale))
data_merged2 <- mutate(data_merged2, scale = ifelse(scale == "_E", "Extra", scale))
data_merged2 <- mutate(data_merged2, scale = ifelse(scale == "Extra", "National", scale))
data_merged2$scale[data_merged2$sample_name == 'CHIS_E9_1'] <- 'Regional'
data_merged2$scale[data_merged2$sample_name == 'CHIS_E10_1'] <- 'Regional'
# filter the data frame for Race "Olotillo"
olotillo_data <- subset(data_merged2, Race == "Olotillo")
# post the unique values in the column 'scale'
olotillo_counts <- table(olotillo_data$scale)
# show results
print(olotillo_counts)
# filter the data frame for Race "Olotillo"
olotillo_data <- subset(data_merged2, Race == "Olotillo")
# post the unique values in the column 'scale'
olotillo_counts <- table(olotillo_data$scale)
# show results
print(olotillo_counts)
het_F <- ggplot(data_merged2, aes(F)) + geom_density(fill = "cyan", colour= "black", alpha = 0.3)
het_F + theme_light()
het_F <- ggplot(data_merged2, aes(F)) + geom_histogram(fill = "deeppink2", colour= "black", alpha = 0.3)
het_F + theme_light()
summary(data_merged2$F)
mean(data_merged2$F)
sd(data_merged2$F)
sprintf("Media: %.2f, Desviación Estándar: %.2f", mean(het$F), sd(data_merged2$F))
summary_by_race <- summaryBy(F ~ Race, data=data_merged2, FUN=c(mean, median, sd, min, max))
# Function to round all numeric columns of summary_by_race to 2 decimal places
round_df <- function(summary_by_race, digits) {
num_cols <- sapply(summary_by_race, is.numeric) #identify numeric columns
summary_by_race[num_cols] <- lapply(summary_by_race[num_cols], round, digits = digits) # round numeric columns
return(summary_by_race)
}
# Apply the function to the summary_by_scale object
summary_by_race_rounded <- round_df(summary_by_race, 2)
het_O.HOM. <-ggplot(data_merged2, aes(O.HOM.)) + geom_density(fill = "cyan", colour= "black", alpha = 0.3)
het_O.HOM. + theme_light()
data_merged2$O.HET. <- data_merged2$N_SITES - data_merged2$O.HOM.
data_merged2$O.HET. <- data_merged2$N_SITES - data_merged2$O.HOM.
data_merged2$O.HET. <- data_merged2$N_SITES - data_merged2$O.HOM.
data_merged2$E.HET. <- data_merged2$N_SITES - data_merged2$E.HOM.
data_merged2$HETob <- data_merged2$O.HET. / data_merged2$N_SITES
